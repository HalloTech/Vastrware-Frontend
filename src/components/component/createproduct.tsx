'use client'
/**
* This code was generated by v0 by Vercel.
* @see https://v0.dev/t/G3fG1NovqMt
* Documentation: https://v0.dev/docs#integrating-generated-code-into-your-nextjs-app
*/

/** Add fonts into your Next.js project:

import { Arimo } from 'next/font/google'
import { Chivo } from 'next/font/google'

arimo({
  subsets: ['latin'],
  display: 'swap',
})

chivo({
  subsets: ['latin'],
  display: 'swap',
})

To read more about using these font, please visit the Next.js documentation:
- App Directory: https://nextjs.org/docs/app/building-your-application/optimizing/fonts
- Pages Directory: https://nextjs.org/docs/pages/building-your-application/optimizing/fonts
**/
import { Label } from "@/components/ui/label"
import { Input } from "@/components/ui/input"
import { Textarea } from "@/components/ui/textarea"
import { Select, SelectTrigger, SelectValue, SelectContent, SelectItem } from "@/components/ui/select"
import { Card, CardHeader, CardTitle, CardDescription, CardContent } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { SetStateAction, useRef, useState } from "react"
import { ListOrderedIcon, Plus, X } from "lucide-react"
import { Checkbox } from "../ui/checkbox"
import { Inputfile } from "./inputfile"
import Image from "next/image"
import ImageContainer from "../functional/ImageContainer"
import { createProduct } from "@/actions/product"
import SizeAndColor from "../functional/SizeAndColor"
import { productDataPosting } from "@/types/product"
import { Slider } from "@/components/ui/slider"
import toast, { Toaster } from "react-hot-toast"
import { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuLabel, DropdownMenuRadioGroup, DropdownMenuRadioItem, DropdownMenuSeparator, DropdownMenuTrigger } from "../ui/dropdown-menu"


export type SizersAndColorsType ={
  size:string,dimensions:string,colors:Array<{color:string,combination_price:number}>
}

export type OtherDataType={
  name:string,description:string,category:string,price:number,stockQuantity: number,carousel:boolean,most_selling_product:boolean,product_specification:{
    material:string,
    careInstruction: string,
    // dimensions: string,
  }
  productDiscount:number
}

export function Createproduct() {
  const [sizesAndColors,setSizesAndColors]=useState<SizersAndColorsType[]>([])
  const [images,setImages]=useState<File[]>([])
  const [otherData,setOtherData]=useState<OtherDataType>({
    name:'',description:'',category:'',price:0,stockQuantity:0,carousel:false,most_selling_product:false,productDiscount:5,product_specification:{
      material:'',careInstruction:''
    } })
  const [selectedSizes,setSelectedSizes]=useState<Array<string>>([])
  const [isSubmiting,setIsSubmiting]=useState(false)

  const categories=['Sarees', 'Lehenga', 'Suite', 'Gowns', 'Laungery & Garments', 'Thaan kapda', 'Froks']
  
  const createNewProduct=async ()=>{

    if(!otherData.name || !otherData.price || !otherData.stockQuantity || !otherData.description || sizesAndColors.length==0 || !otherData.category){
      return toast.error('Please fill the * fields, there are required.',{duration:5000})
    }


    toast.promise(
      new Promise(async(resolve,reject)=>{
        try {
          setIsSubmiting(true)
          const data:productDataPosting={
            name:otherData.name,
            description:otherData.description,
            price:otherData.price,
            discountPercentage:otherData.productDiscount,
            category:otherData.category,
            stockQuantity:otherData.stockQuantity,
            availableSizesColors:JSON.stringify(sizesAndColors),
            isAvailable:true,
            product_specification:otherData.product_specification,
            carousel:otherData.carousel,
            most_selling_product:otherData.most_selling_product
          }
          const formData=new FormData()
          formData.append('data',JSON.stringify(data))
          for (let file of images) {
              formData.append('images[]', file, file.name);
          }
          const res=await createProduct(formData)
          if(res.status==201){
            resolve(res.result)

          }else{
            throw Error(res.error)
          }
        } catch (error:any) {
          reject(error.message)
        }finally{
          setIsSubmiting(false)
        }
      }),{
        error:(e)=><p>{e}</p>,
        loading:'Loading...',
        success:(e:any)=>{
          setSizesAndColors([])
          setImages([])
          setOtherData({
            name:'',description:'',category:'',price:0,stockQuantity:0,carousel:false,most_selling_product:false,productDiscount:5,product_specification:{
              material:'',careInstruction:''
            } })
          setSelectedSizes([])
          return<p>{e}</p>
      }
      },{duration:5000})
   

    // console.log(res)
  }

  return (
    <>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-8 w-full px-4 md:px-6 py-12">
        <div className="grid gap-6">
          <div className="grid gap-2">
            <Label htmlFor="name">Product Name *</Label>
            <Input value={otherData.name} onChange={(e)=>{setOtherData({...otherData,name:e.target.value})}} id="name" type="text" placeholder="Enter product name" />
          </div>
          <div className="grid gap-2">
            <Label htmlFor="description">Description *</Label>
            <Textarea value={otherData.description} onChange={(e)=>setOtherData({...otherData,description:e.target.value})} id="description" placeholder="Enter product description" className="min-h-[120px]" />
          </div>

          <div className="grid gap-2">
          <Label htmlFor="description">Category *</Label>

          <DropdownMenu>
            <DropdownMenuTrigger asChild>
              <Button variant="outline" size="sm">
                {/* <ListOrderedIcon className="h-4 w-4 mr-2" /> */}
                {otherData.category!='' ? otherData.category: 'Select Category'}
              </Button>
            </DropdownMenuTrigger>
            <DropdownMenuContent align="end" className="w-64">
              <DropdownMenuLabel>Category</DropdownMenuLabel>
              <DropdownMenuSeparator />
              <DropdownMenuRadioGroup onValueChange={(e)=>setOtherData({...otherData,category:e})} >
                {categories.map((item)=>{
                  return(
                    <DropdownMenuRadioItem key={item} value={item}>{item}</DropdownMenuRadioItem>
                  )
                })}
              </DropdownMenuRadioGroup>
            </DropdownMenuContent>
          </DropdownMenu>
          </div>

          <div className="grid grid-cols-2 gap-6">
            <div className="grid gap-2">
              <Label htmlFor="price">Price *</Label>
              <Input value={otherData.price} onChange={(e)=>setOtherData({...otherData,price:parseInt(e.target.value)})} id="price" type="number" placeholder="Enter price" />
            </div>
            <div className="grid gap-2">
              <Label htmlFor="quantity">Quantity *</Label>
              <Input value={otherData.stockQuantity} onChange={(e)=>setOtherData({...otherData,stockQuantity:parseInt(e.target.value)})} id="quantity" type="number" placeholder="Enter quantity" />
            </div>
          </div>
          <div className="grid gap-2">
            <Label>Product Specifications</Label>
            <div className="grid grid-cols-1 sm:grid-cols-2 gap-4 items-start">
              <div className="grid gap-2">
                <Label htmlFor="material">Material</Label>
                <Input value={otherData.product_specification.material} onChange={(e)=>setOtherData({
                  ...otherData,
                  product_specification:{...otherData.product_specification,material:e.target.value}})} id="material" type="text" placeholder="Enter material" />
              </div>
              {/* <div className="grid gap-2">
                <Label htmlFor="dimensions">Dimensions</Label>
                <Input onChange={(e)=>setOtherData({
                  ...otherData,
                  product_specification:{...otherData.product_specification,dimensions:e.target.value}})} id="dimensions" type="text" placeholder="Enter dimensions" />
              </div> */}
              <div className="grid gap-2">
                <Label htmlFor="care-instructions">Care Instructions</Label>
                <Textarea value={otherData.product_specification.careInstruction} onChange={(e)=>setOtherData({
                  ...otherData,
                  product_specification:{...otherData.product_specification,careInstruction:e.target.value}})} id="care-instructions" placeholder="Enter care instructions" className="min-h-[120px]" />
              </div>
              
            </div>
          </div>
          <div className="grid gap-2">
            <Label htmlFor="size">Available Size and color *</Label>
            <SizeAndColor 
            setSizesAndColors={setSizesAndColors} sizesAndColors={sizesAndColors}
            selectedSizes={selectedSizes} setSelectedSizes={setSelectedSizes}/>
          </div>
          

          {/* Caousel and most sellers */}
          <div className="grid gap-2">
            <Label>Marketing</Label>
            <div className="grid grid-cols-1 sm:grid-cols-2 gap-4">
              <div className="grid grid-cols-2 items-center gap-2">
                <Label htmlFor="material">Add product to carousel</Label>
                <Checkbox 
                onCheckedChange={(e)=>{
                  // if(typeof(e.valueOf()==Boolean))
                  setOtherData({...otherData,carousel:e.valueOf().toString()=='true'})
                  }}/>
              </div>
              <div className="grid grid-cols-2 items-center gap-2 ">
                <Label htmlFor="dimensions">Is this a best selling products of yours.</Label>
                <Checkbox onCheckedChange={(e)=>{
                  // if(typeof(e.valueOf()==Boolean))
                  setOtherData({...otherData,most_selling_product:e.valueOf().toString()=='true'})
                  }}/>
              </div>
            </div>
          </div>

          {/* Product Discount */}
          <div className="grid gap-2">
            <Label htmlFor="Product-Discounts">Product Discounts {otherData.productDiscount}%</Label>
            <Slider onValueChange={(e)=>setOtherData(prev=>{return{...prev,productDiscount:e[0]}})} value={[otherData.productDiscount]} defaultValue={[5]} min={0} max={100} step={1} />
          </div>
        </div>
        <div className="grid gap-6">
          <Card>
            <CardHeader>
              <CardTitle>Product Images</CardTitle>
              <CardDescription>
                Upload images for your product. <br />
                The first image should be the thumbnail of your product</CardDescription>
            </CardHeader>
            <CardContent>
              <div className="grid gap-4">
                <div className="grid grid-cols-3 gap-2">
                  {Array(3).fill(0).map((_val,ind)=>{
                  return (
                  <button key={ind} className="flex aspect-square w-full items-center justify-center rounded-md border border-dashed">
                    <span className="sr-only">Upload</span>
                    <div className=" w-full h-full">
                      <ImageContainer ind={ind} setFiles={setImages} image={images[ind]}/>
                    </div>
                  </button>)})}
                </div>
                <div className="grid grid-cols-3 gap-2">
                  {Array(3).fill(0).map((_val,ind)=>{
                  return(
                    <button key={ind} className="flex aspect-square w-full items-center justify-center rounded-md border border-dashed">
                      <span className="sr-only">Upload</span>
                      <div className=" w-full h-full">
                          <ImageContainer ind={ind+3} setFiles={setImages} image={images[ind+3]}/>
                      </div>
                    </button>
                    )})
                  }
                </div>
              </div>
            </CardContent>
          </Card>
          <div className="flex justify-end gap-2">
            <Button variant="outline">Cancel</Button>
            <Button disabled={isSubmiting} onClick={()=>{
              createNewProduct()
            }}>Save Product</Button>
          </div>
        </div>
      </div>
      
      <Toaster/>
    </>
  )
}
