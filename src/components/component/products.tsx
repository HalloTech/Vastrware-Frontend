/**
* This code was generated by v0 by Vercel.
* @see https://v0.dev/t/AVOG3DG0uc8
* Documentation: https://v0.dev/docs#integrating-generated-code-into-your-nextjs-app
*/

/** Add fonts into your Next.js project:

import { Rethink_Sans } from 'next/font/google'

rethink_sans({
  subsets: ['latin'],
  display: 'swap',
})

To read more about using these font, please visit the Next.js documentation:
- App Directory: https://nextjs.org/docs/app/building-your-application/optimizing/fonts
- Pages Directory: https://nextjs.org/docs/pages/building-your-application/optimizing/fonts
**/
"use client"

import { useState, useMemo, SetStateAction, JSX, SVGProps } from "react"
import Link from "next/link"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { DropdownMenu, DropdownMenuTrigger, DropdownMenuContent, DropdownMenuLabel, DropdownMenuSeparator } from "@/components/ui/dropdown-menu"
import { Label } from "@/components/ui/label"
import { Table, TableHeader, TableRow, TableHead, TableBody, TableCell } from "@/components/ui/table"

export function Products() {
  const [search, setSearch] = useState("")
  const [filters, setFilters] = useState({
    category: [],
    price: { min: 0, max: Infinity },
    stock: { min: 0, max: Infinity },
  })
  const handleSearch = (e: { target: { value: SetStateAction<string> } }) => setSearch(e.target.value)
  const handleFilterChange = (type: string, value: { min: number; max: number }) => {
    setFilters((prev) => ({
      ...prev,
      [type]: value,
    }))
  }
  const products = [
    {
      id: 1,
      name: "Acme Wireless Headphones",
      description: "High-quality wireless headphones with noise cancellation",
      price: 99.99,
      stock: 50,
    },
    {
      id: 2,
      name: "Mega Backpack",
      description: "Durable and spacious backpack for everyday use",
      price: 59.99,
      stock: 25,
    },
    {
      id: 3,
      name: "Zen Yoga Mat",
      description: "Premium yoga mat for a comfortable practice",
      price: 39.99,
      stock: 100,
    },
    {
      id: 4,
      name: "Turbo Blender",
      description: "High-powered blender for smoothies and more",
      price: 79.99,
      stock: 30,
    },
    {
      id: 5,
      name: "Comfort Slippers",
      description: "Cozy and supportive slippers for indoor wear",
      price: 24.99,
      stock: 75,
    },
  ]
  const filteredProducts = useMemo(() => {
    return products.filter((product) => {
      const nameMatch = product.name.toLowerCase().includes(search.toLowerCase())
      const priceMatch = product.price >= filters.price.min && product.price <= filters.price.max
      const stockMatch = product.stock >= filters.stock.min && product.stock <= filters.stock.max
      return nameMatch && priceMatch && stockMatch
    })
  }, [search, filters])
  return (
    <div className="flex flex-col h-full">
      <div className="flex">
        <aside className="bg-background border-r p-4 md:p-6 flex flex-col gap-4">
          <Link href="#" className="flex items-center gap-2" prefetch={false}>
            <HomeIcon className="w-5 h-5" />
            <span>Dashboard</span>
          </Link>
          <Link href="#" className="flex items-center gap-2 text-primary" prefetch={false}>
            <PackageIcon className="w-5 h-5" />
            <span>Products</span>
          </Link>
          <Link href="#" className="flex items-center gap-2" prefetch={false}>
            <ShoppingCartIcon className="w-5 h-5" />
            <span>Orders</span>
          </Link>
          <Link href="#" className="flex items-center gap-2" prefetch={false}>
            <UsersIcon className="w-5 h-5" />
            <span>Customers</span>
          </Link>
          <Link href="#" className="flex items-center gap-2" prefetch={false}>
            <LineChartIcon className="w-5 h-5" />
            <span>Reports</span>
          </Link>
          <Link href="#" className="flex items-center gap-2" prefetch={false}>
            <SettingsIcon className="w-5 h-5" />
            <span>Settings</span>
          </Link>
        </aside>
        <div className="flex-1 flex flex-col">
          <header className="bg-background p-4 md:p-6 flex items-center justify-between">
            <h1 className="text-2xl font-bold">Products</h1>
            <Button size="sm">Create Product</Button>
          </header>
          <div className="flex-1 p-4 md:p-6 overflow-auto">
            <div className="bg-background rounded-lg shadow-sm overflow-hidden">
              <div className="p-4 md:p-6 border-b">
                <div className="flex items-center gap-4">
                  <div className="relative flex-1">
                    <div className="absolute left-3 top-1/2 -translate-y-1/2 text-muted-foreground" />
                    <Input
                      type="text"
                      placeholder="Search products..."
                      className="pl-10 w-full"
                      value={search}
                      onChange={handleSearch}
                    />
                  </div>
                  <DropdownMenu>
                    <DropdownMenuTrigger asChild>
                      <Button variant="outline" size="sm">
                        <FilterIcon className="w-4 h-4 mr-2" />
                        Filters
                      </Button>
                    </DropdownMenuTrigger>
                    <DropdownMenuContent align="end" className="w-[300px]">
                      <DropdownMenuLabel>Filters</DropdownMenuLabel>
                      <DropdownMenuSeparator />
                      <div className="grid gap-4">
                        <div className="grid gap-2">
                          <Label htmlFor="price-min">Price</Label>
                          <div className="flex items-center gap-2">
                            <Input
                              id="price-min"
                              type="number"
                              placeholder="Min"
                              className="w-full"
                              value={filters.price.min}
                              onChange={(e) =>
                                handleFilterChange("price", {
                                  min: Number(e.target.value),
                                  max: filters.price.max,
                                })
                              }
                            />
                            <span>-</span>
                            <Input
                              type="number"
                              placeholder="Max"
                              className="w-full"
                              value={filters.price.max}
                              onChange={(e) =>
                                handleFilterChange("price", {
                                  min: filters.price.min,
                                  max: Number(e.target.value),
                                })
                              }
                            />
                          </div>
                        </div>
                        <div className="grid gap-2">
                          <Label htmlFor="stock-min">Stock</Label>
                          <div className="flex items-center gap-2">
                            <Input
                              id="stock-min"
                              type="number"
                              placeholder="Min"
                              className="w-full"
                              value={filters.stock.min}
                              onChange={(e) =>
                                handleFilterChange("stock", {
                                  min: Number(e.target.value),
                                  max: filters.stock.max,
                                })
                              }
                            />
                            <span>-</span>
                            <Input
                              type="number"
                              placeholder="Max"
                              className="w-full"
                              value={filters.stock.max}
                              onChange={(e) =>
                                handleFilterChange("stock", {
                                  min: filters.stock.min,
                                  max: Number(e.target.value),
                                })
                              }
                            />
                          </div>
                        </div>
                      </div>
                    </DropdownMenuContent>
                  </DropdownMenu>
                </div>
              </div>
              <Table>
                <TableHeader>
                  <TableRow>
                    <TableHead>Product</TableHead>
                    <TableHead>Description</TableHead>
                    <TableHead>Price</TableHead>
                    <TableHead>Stock</TableHead>
                    <TableHead>Actions</TableHead>
                  </TableRow>
                </TableHeader>
                <TableBody>
                  {filteredProducts.map((product) => (
                    <TableRow key={product.id}>
                      <TableCell className="font-medium">{product.name}</TableCell>
                      <TableCell>{product.description}</TableCell>
                      <TableCell>${product.price.toFixed(2)}</TableCell>
                      <TableCell>{product.stock}</TableCell>
                      <TableCell>
                        <div className="flex items-center gap-2">
                          <Button variant="ghost" size="icon">
                            <FilePenIcon className="w-4 h-4" />
                            <span className="sr-only">Edit</span>
                          </Button>
                          <Button variant="ghost" size="icon">
                            <Trash2Icon className="w-4 h-4" />
                            <span className="sr-only">Delete</span>
                          </Button>
                        </div>
                      </TableCell>
                    </TableRow>
                  ))}
                </TableBody>
              </Table>
            </div>
          </div>
        </div>
      </div>
    </div>
  )
}

function FilePenIcon(props: JSX.IntrinsicAttributes & SVGProps<SVGSVGElement>) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <path d="M12 22h6a2 2 0 0 0 2-2V7l-5-5H6a2 2 0 0 0-2 2v10" />
      <path d="M14 2v4a2 2 0 0 0 2 2h4" />
      <path d="M10.4 12.6a2 2 0 1 1 3 3L8 21l-4 1 1-4Z" />
    </svg>
  )
}


function FilterIcon(props: JSX.IntrinsicAttributes & SVGProps<SVGSVGElement>) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <polygon points="22 3 2 3 10 12.46 10 19 14 21 14 12.46 22 3" />
    </svg>
  )
}


function HomeIcon(props: JSX.IntrinsicAttributes & SVGProps<SVGSVGElement>) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <path d="m3 9 9-7 9 7v11a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2z" />
      <polyline points="9 22 9 12 15 12 15 22" />
    </svg>
  )
}


function LineChartIcon(props: JSX.IntrinsicAttributes & SVGProps<SVGSVGElement>) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <path d="M3 3v18h18" />
      <path d="m19 9-5 5-4-4-3 3" />
    </svg>
  )
}


function PackageIcon(props: JSX.IntrinsicAttributes & SVGProps<SVGSVGElement>) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <path d="m7.5 4.27 9 5.15" />
      <path d="M21 8a2 2 0 0 0-1-1.73l-7-4a2 2 0 0 0-2 0l-7 4A2 2 0 0 0 3 8v8a2 2 0 0 0 1 1.73l7 4a2 2 0 0 0 2 0l7-4A2 2 0 0 0 21 16Z" />
      <path d="m3.3 7 8.7 5 8.7-5" />
      <path d="M12 22V12" />
    </svg>
  )
}


function SettingsIcon(props: JSX.IntrinsicAttributes & SVGProps<SVGSVGElement>) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <path d="M12.22 2h-.44a2 2 0 0 0-2 2v.18a2 2 0 0 1-1 1.73l-.43.25a2 2 0 0 1-2 0l-.15-.08a2 2 0 0 0-2.73.73l-.22.38a2 2 0 0 0 .73 2.73l.15.1a2 2 0 0 1 1 1.72v.51a2 2 0 0 1-1 1.74l-.15.09a2 2 0 0 0-.73 2.73l.22.38a2 2 0 0 0 2.73.73l.15-.08a2 2 0 0 1 2 0l.43.25a2 2 0 0 1 1 1.73V20a2 2 0 0 0 2 2h.44a2 2 0 0 0 2-2v-.18a2 2 0 0 1 1-1.73l.43-.25a2 2 0 0 1 2 0l.15.08a2 2 0 0 0 2.73-.73l.22-.39a2 2 0 0 0-.73-2.73l-.15-.08a2 2 0 0 1-1-1.74v-.5a2 2 0 0 1 1-1.74l.15-.09a2 2 0 0 0 .73-2.73l-.22-.38a2 2 0 0 0-2.73-.73l-.15.08a2 2 0 0 1-2 0l-.43-.25a2 2 0 0 1-1-1.73V4a2 2 0 0 0-2-2z" />
      <circle cx="12" cy="12" r="3" />
    </svg>
  )
}


function ShoppingCartIcon(props: JSX.IntrinsicAttributes & SVGProps<SVGSVGElement>) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <circle cx="8" cy="21" r="1" />
      <circle cx="19" cy="21" r="1" />
      <path d="M2.05 2.05h2l2.66 12.42a2 2 0 0 0 2 1.58h9.78a2 2 0 0 0 1.95-1.57l1.65-7.43H5.12" />
    </svg>
  )
}


function Trash2Icon(props: JSX.IntrinsicAttributes & SVGProps<SVGSVGElement>) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <path d="M3 6h18" />
      <path d="M19 6v14c0 1-1 2-2 2H7c-1 0-2-1-2-2V6" />
      <path d="M8 6V4c0-1 1-2 2-2h4c1 0 2 1 2 2v2" />
      <line x1="10" x2="10" y1="11" y2="17" />
      <line x1="14" x2="14" y1="11" y2="17" />
    </svg>
  )
}


function UsersIcon(props: JSX.IntrinsicAttributes & SVGProps<SVGSVGElement>) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <path d="M16 21v-2a4 4 0 0 0-4-4H6a4 4 0 0 0-4 4v2" />
      <circle cx="9" cy="7" r="4" />
      <path d="M22 21v-2a4 4 0 0 0-3-3.87" />
      <path d="M16 3.13a4 4 0 0 1 0 7.75" />
    </svg>
  )
}


function XIcon(props: JSX.IntrinsicAttributes & SVGProps<SVGSVGElement>) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <path d="M18 6 6 18" />
      <path d="m6 6 12 12" />
    </svg>
  )
}
