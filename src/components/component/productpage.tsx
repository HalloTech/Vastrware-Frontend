/**
* This code was generated by v0 by Vercel.
* @see https://v0.dev/t/4QInxT14jDW
* Documentation: https://v0.dev/docs#integrating-generated-code-into-your-nextjs-app
*/

/** Add fonts into your Next.js project:

import { Archivo } from 'next/font/google'
import { Libre_Franklin } from 'next/font/google'

archivo({
  subsets: ['latin'],
  display: 'swap',
})

libre_franklin({
  subsets: ['latin'],
  display: 'swap',
})

To read more about using these font, please visit the Next.js documentation:
- App Directory: https://nextjs.org/docs/app/building-your-application/optimizing/fonts
- Pages Directory: https://nextjs.org/docs/pages/building-your-application/optimizing/fonts
**/
"use client"

import { useState, useMemo, AwaitedReactNode, JSXElementConstructor, Key, ReactElement, ReactNode, JSX, SVGProps } from "react"
import { Input } from "@/components/ui/input"
import { Button } from "@/components/ui/button"
import { Accordion, AccordionItem, AccordionTrigger, AccordionContent } from "@/components/ui/accordion"
import { Label } from "@/components/ui/label"
import { Checkbox } from "@/components/ui/checkbox"

export function Productpage() {
  const [searchTerm, setSearchTerm] = useState("")
  const [filters, setFilters] = useState({
    category: [],
    priceRange: [0, 100],
    rating: 0,
  })
  const products = [
    {
      id: 1,
      image: "/placeholder.svg",
      title: "Wireless Headphones",
      price: 79.99,
      rating: 4.5,
      category: "Electronics",
    },
    {
      id: 2,
      image: "/placeholder.svg",
      title: "Leather Backpack",
      price: 59.99,
      rating: 4.2,
      category: "Bags",
    },
    {
      id: 3,
      image: "/placeholder.svg",
      title: "Outdoor Camping Gear",
      price: 99.99,
      rating: 4.8,
      category: "Outdoors",
    },
    {
      id: 4,
      image: "/placeholder.svg",
      title: "Stylish Sunglasses",
      price: 29.99,
      rating: 4.3,
      category: "Accessories",
    },
    {
      id: 5,
      image: "/placeholder.svg",
      title: "Ergonomic Office Chair",
      price: 149.99,
      rating: 4.6,
      category: "Furniture",
    },
    {
      id: 6,
      image: "/placeholder.svg",
      title: "Smart Home Hub",
      price: 89.99,
      rating: 4.4,
      category: "Electronics",
    },
    {
      id: 7,
      image: "/placeholder.svg",
      title: "Fitness Tracker Watch",
      price: 69.99,
      rating: 4.7,
      category: "Wearables",
    },
    {
      id: 8,
      image: "/placeholder.svg",
      title: "Luxury Throw Blanket",
      price: 79.99,
      rating: 4.9,
      category: "Home",
    },
  ]
  // const filteredProducts = useMemo(() => {
  //   return products.filter((product:any) => {
  //     const { category, priceRange, rating } = filters
  //     return (
  //       product.title.toLowerCase().includes(searchTerm.toLowerCase()) &&
  //       (category.length === 0 || category.includes(product.category)) &&
  //       product.price >= priceRange[0] &&
  //       product.price <= priceRange[1] &&
  //       product.rating >= rating
  //     )
  //   })
  // }, [searchTerm, filters])
  const handleAddToCart = (product: any) => {
    console.log("Added to cart:", product)
  }
  return (
    <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6 p-4 md:p-6">
      <div className="col-span-1 md:col-span-2 lg:col-span-3 xl:col-span-4">
        <div className="flex items-center gap-4 mb-6">
          <Input
            placeholder="Search products..."
            value={searchTerm}
            onChange={(e) => setSearchTerm(e.target.value)}
            className="flex-1"
          />
          <Button>Search</Button>
        </div>
      </div>
      {/* <div className="col-span-1 md:col-span-1 lg:col-span-1 xl:col-span-1"> */}
        {/* <Accordion type="single" collapsible>
          <AccordionItem value="category">
            <AccordionTrigger className="text-base">Category</AccordionTrigger>
            <AccordionContent>
              <div className="grid gap-2">
                <Label className="flex items-center gap-2 font-normal">
                  <Checkbox
                    checked={filters.category.includes("Electronics")}
                    onCheckedChange={() => {
                      setFilters({
                        ...filters,
                        category: filters.category.includes("Electronics")
                          ? filters.category.filter((c) => c !== "Electronics")
                          : [...filters.category, "Electronics"],
                      })
                    }}
                  />
                  Electronics
                </Label>
                <Label className="flex items-center gap-2 font-normal">
                  <Checkbox
                    checked={filters.category.includes("Bags")}
                    onCheckedChange={() => {
                      setFilters({
                        ...filters,
                        category: filters.category.includes("Bags")
                          ? filters.category.filter((c) => c !== "Bags")
                          : [...filters.category, "Bags"],
                      })
                    }}
                  />
                  Bags
                </Label>
                <Label className="flex items-center gap-2 font-normal">
                  <Checkbox
                    checked={filters.category.includes("Outdoors")}
                    onCheckedChange={() => {
                      setFilters({
                        ...filters,
                        category: filters.category.includes("Outdoors")
                          ? filters.category.filter((c) => c !== "Outdoors")
                          : [...filters.category, "Outdoors"],
                      })
                    }}
                  />
                  Outdoors
                </Label>
                <Label className="flex items-center gap-2 font-normal">
                  <Checkbox
                    checked={filters.category.includes("Accessories")}
                    onCheckedChange={() => {
                      setFilters({
                        ...filters,
                        category: filters.category.includes("Accessories")
                          ? filters.category.filter((c) => c !== "Accessories")
                          : [...filters.category, "Accessories"],
                      })
                    }}
                  />
                  Accessories
                </Label>
                <Label className="flex items-center gap-2 font-normal">
                  <Checkbox
                    checked={filters.category.includes("Furniture")}
                    onCheckedChange={() => {
                      setFilters({
                        ...filters,
                        category: filters.category.includes("Furniture")
                          ? filters.category.filter((c) => c !== "Furniture")
                          : [...filters.category, "Furniture"],
                      })
                    }}
                  />
                  Furniture
                </Label>
                <Label className="flex items-center gap-2 font-normal">
                  <Checkbox
                    checked={filters.category.includes("Wearables")}
                    onCheckedChange={() => {
                      setFilters({
                        ...filters,
                        category: filters.category.includes("Wearables")
                          ? filters.category.filter((c) => c !== "Wearables")
                          : [...filters.category, "Wearables"],
                      })
                    }}
                  />
                  Wearables
                </Label>
                <Label className="flex items-center gap-2 font-normal">
                  <Checkbox
                    checked={filters.category.includes("Home")}
                    onCheckedChange={() => {
                      setFilters({
                        ...filters,
                        category: filters.category.includes("Home")
                          ? filters.category.filter((c) => c !== "Home")
                          : [...filters.category, "Home"],
                      })
                    }}
                  />
                  Home
                </Label>
              </div>
            </AccordionContent>
          </AccordionItem>
          <AccordionItem value="price-range">
            <AccordionTrigger className="text-base">Price Range</AccordionTrigger>
            <AccordionContent>
              <div className="grid gap-4">
                <div />
                <div className="flex justify-between text-sm text-muted-foreground">
                  <span>${filters.priceRange[0]}</span>
                  <span>${filters.priceRange[1]}</span>
                </div>
              </div>
            </AccordionContent>
          </AccordionItem>
          <AccordionItem value="rating">
            <AccordionTrigger className="text-base">Rating</AccordionTrigger>
            <AccordionContent>
              <div className="grid gap-2">
                <Label className="flex items-center gap-2 font-normal">
                  <Checkbox
                    checked={filters.rating >= 4}
                    onCheckedChange={() => {
                      setFilters({
                        ...filters,
                        rating: filters.rating >= 4 ? 0 : 4,
                      })
                    }}
                  />
                  4 stars and above
                </Label>
                <Label className="flex items-center gap-2 font-normal">
                  <Checkbox
                    checked={filters.rating >= 3}
                    onCheckedChange={() => {
                      setFilters({
                        ...filters,
                        rating: filters.rating >= 3 ? 0 : 3,
                      })
                    }}
                  />
                  3 stars and above
                </Label>
                <Label className="flex items-center gap-2 font-normal">
                  <Checkbox
                    checked={filters.rating >= 2}
                    onCheckedChange={() => {
                      setFilters({
                        ...filters,
                        rating: filters.rating >= 2 ? 0 : 2,
                      })
                    }}
                  />
                  2 stars and above
                </Label>
                <Label className="flex items-center gap-2 font-normal">
                  <Checkbox
                    checked={filters.rating >= 1}
                    onCheckedChange={() => {
                      setFilters({
                        ...filters,
                        rating: filters.rating >= 1 ? 0 : 1,
                      })
                    }}
                  />
                  1 star and above
                </Label>
              </div>
            </AccordionContent>
          </AccordionItem>
        </Accordion> */}
      {/* </div> */}
      <div className="col-span-1 md:col-span-2 lg:col-span-3 xl:col-span-3">
        <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-3 xl:grid-cols-4 gap-6">
          {products.map((product: { id: Key | null | undefined; title: string | number | bigint | boolean | ReactElement<any, string | JSXElementConstructor<any>> | Iterable<ReactNode> | Promise<AwaitedReactNode> | null | undefined; price: number; rating: number }) => (
            <div key={product.id} className="bg-background rounded-lg overflow-hidden shadow-lg">
              <img
                src="/placeholder.svg"
                alt={'Product Image'}
                width={400}
                height={300}
                className="w-full h-48 object-cover"
              />
              <div className="p-4">
                <h3 className="text-lg font-semibold">{product.title}</h3>
                <p className="text-muted-foreground text-sm">${product.price.toFixed(2)}</p>
                <div className="flex items-center gap-1 text-sm text-muted-foreground">
                  <StarIcon className="w-4 h-4 fill-primary" />
                  <span>{product.rating.toFixed(1)}</span>
                </div>
                <Button className="mt-4 w-full" onClick={() => handleAddToCart(product)}>
                  Add to Cart
                </Button>
              </div>
            </div>
          ))}
        </div>
      </div>
    </div>
  )
}

function StarIcon(props: JSX.IntrinsicAttributes & SVGProps<SVGSVGElement>) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <polygon points="12 2 15.09 8.26 22 9.27 17 14.14 18.18 21.02 12 17.77 5.82 21.02 7 14.14 2 9.27 8.91 8.26 12 2" />
    </svg>
  )
}


function XIcon(props: JSX.IntrinsicAttributes & SVGProps<SVGSVGElement>) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <path d="M18 6 6 18" />
      <path d="m6 6 12 12" />
    </svg>
  )
}
