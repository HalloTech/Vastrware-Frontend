/**
* This code was generated by v0 by Vercel.
* @see https://v0.dev/t/X13nW0pJHON
* Documentation: https://v0.dev/docs#integrating-generated-code-into-your-nextjs-app
*/

/** Add fonts into your Next.js project:

import { Inter } from 'next/font/google'

inter({
  subsets: ['latin'],
  display: 'swap',
})

To read more about using these font, please visit the Next.js documentation:
- App Directory: https://nextjs.org/docs/app/building-your-application/optimizing/fonts
- Pages Directory: https://nextjs.org/docs/pages/building-your-application/optimizing/fonts
**/
"use client"

import { Dispatch, JSX, SetStateAction, SVGProps, useEffect, useState } from "react"
import { Dialog, DialogTrigger, DialogContent, DialogHeader, DialogTitle, DialogDescription, DialogFooter } from "@/components/ui/dialog"
import { Button } from "@/components/ui/button"
import { Label } from "@/components/ui/label"
import { Input } from "@/components/ui/input"
import { X } from "lucide-react"
import { SizersAndColorsType } from "./createproduct"

interface modalForColorAndPriceProps{
  size:string,selectedSizes:string[],setSelectedSizes:Dispatch<SetStateAction<Array<string>>>
  setSizesAndColors:Dispatch<SetStateAction<SizersAndColorsType[]>>
  defaultColorsAndPrices:{color:string,combination_price:number}[]
}

export function ModalForColorAndPrice({size,selectedSizes,setSelectedSizes,setSizesAndColors,defaultColorsAndPrices}:modalForColorAndPriceProps) {
  const [colorPrices, setColorPrices] = useState([{ color: "", combination_price: 0 }])
  const [dimensions,setDimensions]=useState<string>('')
  const handleAddColorPrice = () => {
    setColorPrices([...colorPrices, { color: "", combination_price: 0 }])
  }
  const handleColorChange = (index: number, value: string) => {
    const updatedColorPrices = [...colorPrices]
    updatedColorPrices[index].color = value
    setColorPrices(updatedColorPrices)
  }
  const handlePriceChange = (index: number, value: number) => {
    const updatedColorPrices = [...colorPrices]
    updatedColorPrices[index].combination_price = value
    setColorPrices(updatedColorPrices)
  }
  const handleSubmit = () => {
    setSelectedSizes([...selectedSizes,size])
    setSizesAndColors((prev)=>{
      if(colorPrices.length>=1){
        const filteredCopy=prev.filter((item)=>{
          return item.size!==size
        })
        console.log(filteredCopy)
        return [...filteredCopy,{size:size,dimensions:dimensions,colors:colorPrices}]
      }
      return [...prev,{size:size,dimensions:dimensions,colors:colorPrices}]
    })
  }

  useEffect(()=>{
    setColorPrices(defaultColorsAndPrices?.length>=1?defaultColorsAndPrices:[{ color: "", combination_price: 0 }])
    setDimensions(defaultColorsAndPrices?.length>=1?dimensions:'')
  },[defaultColorsAndPrices])

  
  return (
    <Dialog>
      <DialogTrigger asChild>
        <Button variant="outline" className={` w-20 text-center 
                    ${selectedSizes.includes(size)? 'bg-gradient-to-r' :'bg-slate-200'} to-red-300 from-red-400 rounded-full px-3 py-2 shadow-sm transition-all`}>{size}</Button>
      </DialogTrigger>
      <DialogContent className="md:max-w-[425px]">
        <DialogHeader>
          <DialogTitle>Add Color & Price For Size {size}</DialogTitle>
          <DialogDescription>Add available colors for this size and coresponding base price.</DialogDescription>
        </DialogHeader>
        <div className="grid gap-4 py-4">
          <div className="grid gap-2">
              <Label htmlFor={`dimensions`}>Dimensions</Label>
              <Input
                id={`dimension`} type="text"
                placeholder="eg: Length 12inch, chest 42inch"
                value={dimensions} 
                onChange={(e) => setDimensions(e.target.value)}
                className="w-full min-w-32"
              />
            </div>
          {colorPrices.map((colorPrice, index) => (
            <div key={index} className="grid grid-cols-[1fr_auto] items-center gap-4 mr-10 relative">
              <div className="grid gap-2">
                <Label htmlFor={`color-${index}`}>Color</Label>
                <Input
                  id={`color-${index}`}
                  value={colorPrice.color}
                  onChange={(e) => handleColorChange(index, e.target.value)}
                  className="w-full min-w-32"
                />
              </div>
              <div className="grid gap-2">
                <Label htmlFor={`price-${index}`}>Price</Label>
                <Input
                  id={`price-${index}`}
                  type="number"
                  value={colorPrice.combination_price}
                  onChange={(e) => handlePriceChange(index, parseInt(e.target.value))}
                  className="w-full"
                />
              </div>
              <div className=" absolute -right-10 top-1/2 translate-y-[-10%]">
                <X onClick={()=>{
                  setColorPrices(prev=>prev.filter((_item,ind)=>ind!==index))
                  if(colorPrices.length==1){
                    setSelectedSizes([])
                  }
                }} size={30} className=" cursor-pointer bg-slate-900 p-2 text-white rounded-full"/>
              </div>
            </div>
          ))}
          <Button type="button" onClick={handleAddColorPrice} className="w-full">
            <PlusIcon className="w-4 h-4 mr-2" />
            Add Color & Price
          </Button>
        </div>
        <DialogFooter>
          <DialogTrigger asChild>
            <Button type="submit" 
            onClick={handleSubmit}
            disabled={colorPrices.map((item)=> Object.values(item)).find((item,ind)=>item.includes(''))?.includes("")||dimensions==''}>Save</Button>
          </DialogTrigger>
        </DialogFooter>
      </DialogContent>
    </Dialog>
  )
}

function PlusIcon(props: JSX.IntrinsicAttributes & SVGProps<SVGSVGElement>) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <path d="M5 12h14" />
      <path d="M12 5v14" />
    </svg>
  )
}


function XIcon(props: JSX.IntrinsicAttributes & SVGProps<SVGSVGElement>) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <path d="M18 6 6 18" />
      <path d="m6 6 12 12" />
    </svg>
  )
}
