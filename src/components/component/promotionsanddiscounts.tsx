/**
* This code was generated by v0 by Vercel.
* @see https://v0.dev/t/XE7qQDE7cWZ
* Documentation: https://v0.dev/docs#integrating-generated-code-into-your-nextjs-app
*/

/** Add fonts into your Next.js project:

import { Inter } from 'next/font/google'

inter({
  subsets: ['latin'],
  display: 'swap',
})

To read more about using these font, please visit the Next.js documentation:
- App Directory: https://nextjs.org/docs/app/building-your-application/optimizing/fonts
- Pages Directory: https://nextjs.org/docs/pages/building-your-application/optimizing/fonts
**/
"use client"

import { useState } from "react"
import { Label } from "@/components/ui/label"
import { Input } from "@/components/ui/input"
import { Textarea } from "@/components/ui/textarea"
import { Select } from "@/components/ui/select"
import { Button } from "@/components/ui/button"
import { Table, TableHeader, TableRow, TableHead, TableBody, TableCell } from "@/components/ui/table"
import { Badge } from "@/components/ui/badge"

export function promotionsanddiscounts() {
  const [promotions, setPromotions] = useState([
    {
      id: 1,
      title: "Summer Sale",
      description: "Up to 50% off on selected items",
      startDate: "2023-06-01",
      endDate: "2023-08-31",
      discountType: "percentage",
      discountValue: 50,
      active: true,
    },
    {
      id: 2,
      title: "Back to School",
      description: "20% off on school supplies",
      startDate: "2023-08-01",
      endDate: "2023-09-15",
      discountType: "percentage",
      discountValue: 20,
      active: true,
    },
    {
      id: 3,
      title: "Holiday Deals",
      description: "$10 off on orders over $100",
      startDate: "2023-11-15",
      endDate: "2023-12-31",
      discountType: "amount",
      discountValue: 10,
      active: true,
    },
  ])
  const [discounts, setDiscounts] = useState([
    {
      id: 1,
      code: "SUMMER10",
      discountType: "percentage",
      discountValue: 10,
      maxUses: 100,
      usesRemaining: 50,
      expirationDate: "2023-08-31",
      active: true,
    },
    {
      id: 2,
      code: "BACKTOSCHOOL15",
      discountType: "percentage",
      discountValue: 15,
      maxUses: 50,
      usesRemaining: 20,
      expirationDate: "2023-09-15",
      active: true,
    },
    {
      id: 3,
      code: "HOLIDAY20",
      discountType: "amount",
      discountValue: 20,
      maxUses: 75,
      usesRemaining: 40,
      expirationDate: "2023-12-31",
      active: true,
    },
  ])
  const [newPromotion, setNewPromotion] = useState({
    title: "",
    description: "",
    startDate: "",
    endDate: "",
    discountType: "percentage",
    discountValue: 0,
  })
  const [newDiscount, setNewDiscount] = useState({
    code: "",
    discountType: "percentage",
    discountValue: 0,
    maxUses: 0,
    expirationDate: "",
  })
  const handleCreatePromotion = () => {
    setPromotions([...promotions, { ...newPromotion, id: promotions.length + 1, active: true }])
    setNewPromotion({
      title: "",
      description: "",
      startDate: "",
      endDate: "",
      discountType: "percentage",
      discountValue: 0,
    })
  }
  const handleCreateDiscount = () => {
    setDiscounts([
      ...discounts,
      { ...newDiscount, id: discounts.length + 1, usesRemaining: newDiscount.maxUses, active: true },
    ])
    setNewDiscount({
      code: "",
      discountType: "percentage",
      discountValue: 0,
      maxUses: 0,
      expirationDate: "",
    })
  }
  const handleEditPromotion = (id, updates) => {
    setPromotions(promotions.map((p) => (p.id === id ? { ...p, ...updates } : p)))
  }
  const handleEditDiscount = (id, updates) => {
    setDiscounts(discounts.map((d) => (d.id === id ? { ...d, ...updates } : d)))
  }
  const handleDeactivatePromotion = (id) => {
    setPromotions(promotions.map((p) => (p.id === id ? { ...p, active: false } : p)))
  }
  const handleDeactivateDiscount = (id) => {
    setDiscounts(discounts.map((d) => (d.id === id ? { ...d, active: false } : d)))
  }
  return (
    <div className="flex flex-col h-screen">
      <header className="bg-primary text-primary-foreground py-4 px-6">
        <h1 className="text-2xl font-bold">Promotions and Discounts</h1>
      </header>
      <main className="flex-1 grid grid-cols-1 md:grid-cols-2 gap-6 p-6">
        <div className="bg-background rounded-lg shadow-md p-6">
          <h2 className="text-xl font-bold mb-4">Dashboard</h2>
          <div className="grid grid-cols-3 gap-4">
            <div className="bg-card rounded-lg p-4">
              <h3 className="text-lg font-bold mb-2">Active Promotions</h3>
              <p className="text-4xl font-bold">{promotions.filter((p) => p.active).length}</p>
            </div>
            <div className="bg-card rounded-lg p-4">
              <h3 className="text-lg font-bold mb-2">Active Discounts</h3>
              <p className="text-4xl font-bold">{discounts.filter((d) => d.active).length}</p>
            </div>
            <div className="bg-card rounded-lg p-4">
              <h3 className="text-lg font-bold mb-2">Redemption Rate</h3>
              <p className="text-4xl font-bold">75%</p>
            </div>
          </div>
        </div>
        <div className="bg-background rounded-lg shadow-md p-6">
          <h2 className="text-xl font-bold mb-4">Create Promotion</h2>
          <form className="grid grid-cols-2 gap-4">
            <div>
              <Label htmlFor="title">Title</Label>
              <Input
                id="title"
                value={newPromotion.title}
                onChange={(e) => setNewPromotion({ ...newPromotion, title: e.target.value })}
              />
            </div>
            <div>
              <Label htmlFor="description">Description</Label>
              <Textarea
                id="description"
                value={newPromotion.description}
                onChange={(e) => setNewPromotion({ ...newPromotion, description: e.target.value })}
              />
            </div>
            <div>
              <Label htmlFor="startDate">Start Date</Label>
              <Input
                id="startDate"
                type="date"
                value={newPromotion.startDate}
                onChange={(e) => setNewPromotion({ ...newPromotion, startDate: e.target.value })}
              />
            </div>
            <div>
              <Label htmlFor="endDate">End Date</Label>
              <Input
                id="endDate"
                type="date"
                value={newPromotion.endDate}
                onChange={(e) => setNewPromotion({ ...newPromotion, endDate: e.target.value })}
              />
            </div>
            <div>
              <Label htmlFor="discountType">Discount Type</Label>
              <Select
                id="discountType"
                value={newPromotion.discountType}
                onValueChange={(e) => setNewPromotion({ ...newPromotion, discountType: e.target.value })}
              >
                <option value="percentage">Percentage</option>
                <option value="amount">Amount</option>
              </Select>
            </div>
            <div>
              <Label htmlFor="discountValue">Discount Value</Label>
              <Input
                id="discountValue"
                type="number"
                value={newPromotion.discountValue}
                onChange={(e) => setNewPromotion({ ...newPromotion, discountValue: Number(e.target.value) })}
              />
            </div>
            <div className="col-span-2">
              <Button onClick={handleCreatePromotion}>Create Promotion</Button>
            </div>
          </form>
        </div>
        <div className="bg-background rounded-lg shadow-md p-6">
          <h2 className="text-xl font-bold mb-4">Create Discount</h2>
          <form className="grid grid-cols-2 gap-4">
            <div>
              <Label htmlFor="code">Code</Label>
              <Input
                id="code"
                value={newDiscount.code}
                onChange={(e) => setNewDiscount({ ...newDiscount, code: e.target.value })}
              />
            </div>
            <div>
              <Label htmlFor="discountType">Discount Type</Label>
              <Select
                id="discountType"
                value={newDiscount.discountType}
                onValueChange={(e) => setNewDiscount({ ...newDiscount, discountType: e.target.value })}
              >
                <option value="percentage">Percentage</option>
                <option value="amount">Amount</option>
              </Select>
            </div>
            <div>
              <Label htmlFor="discountValue">Discount Value</Label>
              <Input
                id="discountValue"
                type="number"
                value={newDiscount.discountValue}
                onChange={(e) => setNewDiscount({ ...newDiscount, discountValue: Number(e.target.value) })}
              />
            </div>
            <div>
              <Label htmlFor="maxUses">Max Uses</Label>
              <Input
                id="maxUses"
                type="number"
                value={newDiscount.maxUses}
                onChange={(e) => setNewDiscount({ ...newDiscount, maxUses: Number(e.target.value) })}
              />
            </div>
            <div>
              <Label htmlFor="expirationDate">Expiration Date</Label>
              <Input
                id="expirationDate"
                type="date"
                value={newDiscount.expirationDate}
                onChange={(e) => setNewDiscount({ ...newDiscount, expirationDate: e.target.value })}
              />
            </div>
            <div className="col-span-2">
              <Button onClick={handleCreateDiscount}>Create Discount</Button>
            </div>
          </form>
        </div>
        <div className="bg-background rounded-lg shadow-md p-6 col-span-1 md:col-span-2">
          <h2 className="text-xl font-bold mb-4">Promotions</h2>
          <Table>
            <TableHeader>
              <TableRow>
                <TableHead>Title</TableHead>
                <TableHead>Description</TableHead>
                <TableHead>Start Date</TableHead>
                <TableHead>End Date</TableHead>
                <TableHead>Discount</TableHead>
                <TableHead>Status</TableHead>
                <TableHead>Actions</TableHead>
              </TableRow>
            </TableHeader>
            <TableBody>
              {promotions.map((promotion) => (
                <TableRow key={promotion.id}>
                  <TableCell>{promotion.title}</TableCell>
                  <TableCell>{promotion.description}</TableCell>
                  <TableCell>{promotion.startDate}</TableCell>
                  <TableCell>{promotion.endDate}</TableCell>
                  <TableCell>
                    {promotion.discountType === "percentage"
                      ? `${promotion.discountValue}%`
                      : `$${promotion.discountValue}`}
                  </TableCell>
                  <TableCell>
                    {promotion.active ? (
                      <Badge variant="secondary">Active</Badge>
                    ) : (
                      <Badge variant="outline">Inactive</Badge>
                    )}
                  </TableCell>
                  <TableCell>
                    <div className="flex items-center gap-2">
                      <Button
                        variant="outline"
                        size="sm"
                        onClick={() =>
                          handleEditPromotion(promotion.id, {
                            title: "Updated Promotion",
                            description: "New description",
                            startDate: "2023-07-01",
                            endDate: "2023-09-30",
                            discountValue: 40,
                          })
                        }
                      >
                        Edit
                      </Button>
                      <Button variant="outline" size="sm" onClick={() => handleDeactivatePromotion(promotion.id)}>
                        Deactivate
                      </Button>
                    </div>
                  </TableCell>
                </TableRow>
              ))}
            </TableBody>
          </Table>
        </div>
        <div className="bg-background rounded-lg shadow-md p-6 col-span-1 md:col-span-2">
          <h2 className="text-xl font-bold mb-4">Discounts</h2>
          <Table>
            <TableHeader>
              <TableRow>
                <TableHead>Code</TableHead>
                <TableHead>Discount</TableHead>
                <TableHead>Max Uses</TableHead>
                <TableHead>Uses Remaining</TableHead>
                <TableHead>Expiration</TableHead>
                <TableHead>Status</TableHead>
                <TableHead>Actions</TableHead>
              </TableRow>
            </TableHeader>
            <TableBody>
              {discounts.map((discount) => (
                <TableRow key={discount.id}>
                  <TableCell>{discount.code}</TableCell>
                  <TableCell>
                    {discount.discountType === "percentage"
                      ? `${discount.discountValue}%`
                      : `$${discount.discountValue}`}
                  </TableCell>
                  <TableCell>{discount.maxUses}</TableCell>
                  <TableCell>{discount.usesRemaining}</TableCell>
                  <TableCell>{discount.expirationDate}</TableCell>
                  <TableCell>
                    {discount.active ? (
                      <Badge variant="secondary">Active</Badge>
                    ) : (
                      <Badge variant="outline">Inactive</Badge>
                    )}
                  </TableCell>
                  <TableCell>
                    <div className="flex items-center gap-2">
                      <Button
                        variant="outline"
                        size="sm"
                        onClick={() =>
                          handleEditDiscount(discount.id, {
                            discountValue: 15,
                            maxUses: 75,
                            expirationDate: "2023-10-31",
                          })
                        }
                      >
                        Edit
                      </Button>
                      <Button variant="outline" size="sm" onClick={() => handleDeactivateDiscount(discount.id)}>
                        Deactivate
                      </Button>
                    </div>
                  </TableCell>
                </TableRow>
              ))}
            </TableBody>
          </Table>
        </div>
      </main>
    </div>
  )
}
